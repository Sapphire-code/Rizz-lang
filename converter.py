import time

def rizz_to_python(rizz_code):
    python_code = []
    python_code.append("# This was generated by rizz2bf converter. running converter again will cause the python program to be over written!")
    python_code.append("tape = [0] * 30000")
    python_code.append("ptr = 0")

    indentation_level = 0
    indent_string = "    "  # Assuming 4 spaces per indentation level
    within_while_block = False

    for char in rizz_code:
        if char == ">":
            if within_while_block:
                python_code.append(indent_string * indentation_level + "    ptr += 1")
            else:
                python_code.append(indent_string * indentation_level + "ptr += 1")
        elif char == "<":
            if within_while_block:
                python_code.append(indent_string * indentation_level + "    ptr -= 1")
            else:
                python_code.append(indent_string * indentation_level + "ptr -= 1")
        elif char == "I":
            if within_while_block:
                python_code.append(indent_string * indentation_level + "    tape[ptr] += 1")
            else:
                python_code.append(indent_string * indentation_level + "tape[ptr] += 1")
        elif char == "R":
            if within_while_block:
                python_code.append(indent_string * indentation_level + "    tape[ptr] -= 1")
            else:
                python_code.append(indent_string * indentation_level + "tape[ptr] -= 1")
        elif char == "Z":
            if within_while_block:
                python_code.append(indent_string * indentation_level + "    print(chr(tape[ptr]), end='')")
            else:
                python_code.append(indent_string * indentation_level + "print(chr(tape[ptr]), end='')")
        elif char == ",":
            if within_while_block:
                python_code.append(indent_string * indentation_level + "    tape[ptr] = ord(input()[0])")
            else:
                python_code.append(indent_string * indentation_level + "tape[ptr] = ord(input()[0])")
        elif char == "{":
            if within_while_block:
                python_code.append(indent_string * indentation_level + "    while tape[ptr]:")
                indentation_level += 1
            else:
                python_code.append(indent_string * indentation_level + "while tape[ptr]:")
                indentation_level += 1
            within_while_block = True
        elif char == "}":
            indentation_level -= 1
            if within_while_block:
                within_while_block = False
        else:
            continue

    # Can be used for debugging
    # print("\n".join(python_code))
    user_choice = input("\nWould you like to save to a file? (y/n): ")
    if user_choice.lower() == "y":
        python_program_path = input("Enter Path Where you want to save (If file already exists, it will be rewritten!): ")
        with open(python_program_path, 'w') as file:
            file.write("\n".join(python_code))
    elif user_choice.lower() == "n":
        print("Printing code output in 3 seconds...")
        time.sleep(3)
        print("\n".join(python_code))
    else:
        print("\u001b[31mInvalid Choice, Please enter 'y' or 'n'.")
        exit()
    

def bf2rizz(bf_file_path):
    with open(bf_file_path, 'r') as file:
        bf_code = file.read()

    rizz_code = bf_code.replace("[", "{").replace("]", "}").replace("+", "I").replace("-", "R").replace(".", "Z")

    user_choice = input("Overwrite the original file with the Rizz code? (y/n): ")
    if user_choice.lower() == "y":
        with open(bf_file_path, 'w') as file:
            try:
                file.write(rizz_code)
                print("Rizz code has been written to the original file.")
            except Exception as error:
                print(f"An error occurred: {error}")
    elif user_choice.lower() == "n":
        new_file_path = bf_file_path.rsplit(".", 1)[0] + "_rizz.rizz"
        with open(new_file_path, 'w') as file:
            try:
                file.write(rizz_code)
                print(f"Rizz code has been saved to a new file: {new_file_path}")
            except Exception as error:
                print(f"An error occurred: {error}")
    else:
        print("\u001b[31mInvalid choice. Please enter 'y' or 'n'.")

def rizz2bf(rizz_file_path):
    with open(rizz_file_path, 'r') as file:
        rizz_code = file.read()

    bf_code = rizz_code.replace("{", "[").replace("}", "]").replace("I", "+").replace("R", "-").replace("Z", ".")

    user_choice = input("Overwrite the original file with the Brainfuck code? (y/n): ")
    if user_choice.lower() == "y":
        with open(rizz_file_path, 'w') as file:
            try:
                file.write(bf_code)
                print("Brainfuck code has been written to the original file.")
            except Exception as error:
                print(f"An error occurred: {error}")
    elif user_choice.lower() == "n":
        new_file_path = rizz_file_path.rsplit(".", 1)[0] + "_bf.bf"
        with open(new_file_path, 'w') as file:
            try:
                file.write(bf_code)
                print(f"Brainfuck code has been saved to a new file: {new_file_path}")
            except Exception as error:
                print(f"An error occurred: {error}")
    else:
        print("Invalid choice. Please enter 'y' or 'n'.")